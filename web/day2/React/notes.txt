
//DOM
-tree like structure created is DOM
-in memory represtation of html elements as object in tree
-easy to manipulate objects
-doc.getElementbyid is faster or doc.queryselector?
-react said dont manipulate dom yourself
-dom manipulation is costly operation that browser does
-react is lib(prove) (react.js)
-creating apps using vite




//ReactBasic.html
-react elements
-developer will never talk to dom (work with react elements)
-developer->React Element->Dom elements
- react dont understand jsx (i support only React.createElement)
-jsx need to be compile and parse which then converts to above
-js is html represenation of above api
-developer understands jsx
-so conversion is done by bable (convert js to react api)
-or can use jsx transformer (JSXBasic.html) //https://cdnjs.com/libraries/react/0.14.0-alpha1



//components
-they r reusable (not only ui but also business)(ui is comprised of elements)
-they r composable
-they r configurable 
-they r modular
-they r testable
-two ways to creact them: function and class based
-components can have another component into it


-u creating individual pages utility provides a way
-2 utility (create react app) (create vite app)
-npm create vite@latest my-react-app  (react,js)
-pacakge.json (contain all dependencies reactapp is having)
-src:
    1. main.jsx is starting point 
    2. bec react is promoting function component app.jsx is function component


//props
-"Props" (short for properties) are inputs passed from a parent component to a child.
-Used to pass data and event handlers to child components.
-Read-only: Props cannot be modified inside the child component (they are immutable).
-Props are how components communicate.
-Props support dynamic rendering and customization.Must use props.<propertyName> to access inside the child.
-what if 25 props (then pass prop as object)
-prop are properties of that object

.....................................................................................
//
-rendor should return 


//bootstrap
-it is  a toolkit
-gives components
-here we gonna use only for styling
-Build fast, responsive sites with Bootstrap
-Powerful, extensible, and feature-packed frontend toolkit. Build and customize with Sass, utilize prebuilt grid system and components, and bring projects to life with powerful JavaScript plugins.
-css (index.css) <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.7/css/bootstrap.min.css" integrity="sha512-fw7f+TcMjTb7bpbLJZlP8g2Y4XcCyFZW8uy8HsRZsH/SwbMw0plKHFHr99DN3l04VsYNwvzicUX/6qurvIxbxw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
-layout-grid(divide into 12)....component-cards




///////
-div: is called block level element (dont allow come after)
-flex:



///
fontawesome: icons
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />


/////
//states
-Props are read-only in React – used to pass data from parent to child.
-To reflect dynamic changes in the UI, React uses state.
-React handles data in two ways:
-Props – for parent-to-child communication.
-State – for component-level internal data.
-State represents the current snapshot of an entity (e.g., likes, input values).
-State is defined within a component, typically like: this.state = { curLikes: 100 };   state={curLikes:this.props.coursedetails.likes};
 To access state in JSX:{this.state.curLikes}
-State is immutable – similar to Java’s String:
-You cannot modify the original state object directly.
-Always use this.setState() to update state:this.setState({ curLikes: this.state.curLikes + 1 });
-Updating state triggers re-render of the component.
-how react understand how to update ui?(each time state changes render  method for that component is call )


//virtual dom
-When the render() method is called for the first time, React creates an in-memory representation of the UI elements (from JSX) — called the Virtual DOM.
-On every state or prop change, a new Virtual DOM is created.
-React uses a diffing algorithm to compare the new Virtual DOM with the previous one.
-This process identifies what has changed (difference between the two virtual DOM trees).
-React then updates only the changed parts in the actual DOM — improving performance.
-This selective update is known as Reconciliation.
-As a result, React avoids full DOM reloads, leading to faster and more efficient UI updates.

-how does react identity which element to remove of?
  -Role of key Prop:
    Each element in a list should have a unique key prop.
    Keys help React identify which items have changed, been added, or been removed.
    Without a key or with incorrect keys (like array indices), React may:Update the wrong element,Cause unexpected re-renders,Misidentify which element to remove or update
  -Removal Logic:
    If a key from the old Virtual DOM does not exist in the new Virtual DOM
    React knows that element has been removed, so it deletes it from the real DOM.
  -Efficient Update:
    React only updates the minimal set of DOM nodes, thanks to key-based tracking.
    {items.map(item => (
        <li key={item.id}>{item.name}</li>
    ))}






/// 
function component
-class is older version
-why functional component? it is a lighted weighted way of creating component. 
-first version of fc dont support state data
-version 16.8 new feature introduce (HOOKS)
-lighted weighted? functional component has less foot prints. (bundle size is less as cbc)
-no need of render method in fc (it will implicity implemented by react)

-Functional components (FC) are a modern, lightweight way to create React components.
-Class components (CC) are the older approach and require more boilerplate.
-FCs are JavaScript functions that return JSX.
-Why Functional Components?
  Simpler syntax – no need for this, constructor, or render() method.
  Lightweight – FCs have smaller footprint and lower bundle size than class-based components.
  Better readability and easier testing.
-State in Functional Components
  Originally, FCs were stateless — they couldn’t manage state or lifecycle.
  React v16.8 introduced Hooks, which added:useState – for managing state,useEffect – for lifecycle-like behavior and more


//states in FC
-Hooks are functions introduced in React v16.8 to enable state and lifecycle in functional components.
-useState() is the hook used to create and manage state.
-const [count, setCount] = useState(100);
  count → State variable (holds the current value)
  setCount → Function to update the count state
  useState(100) returns an array of two elements:const count = useState(100)[0];       // current state value
  const setCount = useState(100)[1];    // function to update state
-useState() must be called at the top level of the component (not inside loops or conditions).
-Updating state via setCount() causes re-render of the component.
-State is preserved across renders, unlike normal variables.
-You can use multiple useState() calls to manage multiple state variables.
-hooks cant be used in cbc


//useEffect in FC
-it is always called after rendering-useEffect() is a lifecycle hook used in functional components.
-It is always called after the component renders (like componentDidMount, componentDidUpdate, componentWillUnmount in class components).
-It is used for side effects like:API calls (AJAX),DOM manipulation,Setting up subscriptions,Event listeners,Timers
-Runs after every render by default.
  To run only once (on mount), pass an empty dependency array [].
  If you pass dependencies (like [count]), it runs only when those values change.
  useEffect is called after every render.
  =Run Once on Mount:
  useEffect(() => {
    console.log("Component mounted");
  }, []);
  =Run When count Changes:
  useEffect(() => {
    console.log("Count changed to", count);
  }, [count]);
  =Cleanup (e.g., removing interval):
  useEffect(() => {
    const id = setInterval(() => console.log("Running..."), 1000);
    return () => clearInterval(id); // cleanup
  }, []);



//routing
-something with change in url 
-router,routes,(having url and component that need to be instantiated),links,BrowserRouter
-dynamic instantiation
-client side
-npm i react-router-dom
-<BrowserRouter>
      <Routes>
        <Route path='/' element={<ListOfCourses/>}/>
        <Route path='/posts' Component={Posts}/>
        <Route path='/counter' Component={Counter}/>
      </Routes>
    </BrowserRouter>
-a tag and link?
-useNavigate
-Routing means changing the content shown based on the URL path.
-In React, this is done using the React Router DOM library.
-It enables client-side routing (without full-page reloads).
  <BrowserRouter>
  Wraps your app to enable routing (uses HTML5 history API).

  <Routes>
  Container for all route definitions.

  <Route path='...' element={<Component />}/>
  Defines a path and which component to show for that path.

  Dynamic Instantiation:
  When the path changes, the corresponding component is instantiated dynamically.
-npm install react-router-dom





//utility: json-server
-npm install json-server
-dummy server
-json-server src/db/course.json --port 3500












