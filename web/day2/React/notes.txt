
//DOM
-tree like structure created is DOM
-in memory represtation of html elements as object in tree
-easy to manipulate objects
-doc.getElementbyid is faster or doc.queryselector?
-react said dont manipulate dom yourself
-dom manipulation is costly operation that browser does
-react is lib(prove) (react.js)
-creating apps using vite




//ReactBasic.html
-react elements
-developer will never talk to dom (work with react elements)
-developer->React Element->Dom elements
- react dont understand jsx (i support only React.createElement)
-jsx need to be compile and parse which then converts to above
-js is html represenation of above api
-developer understands jsx
-so conversion is done by bable (convert js to react api)
-or can use jsx transformer (JSXBasic.html) //https://cdnjs.com/libraries/react/0.14.0-alpha1



//components
-they r reusable (not only ui but also business)(ui is comprised of elements)
-they r composable
-they r configurable 
-they r modular
-they r testable
-two ways to creact them: function and class based
-components can have another component into it


-u creating individual pages utility provides a way
-2 utility (create react app) (create vite app)
-npm create vite@latest my-react-app  (react,js)
-pacakge.json (contain all dependencies reactapp is having)
-src:
    1. main.jsx is starting point 
    2. bec react is promoting function component app.jsx is function component


//props
-"Props" (short for properties) are inputs passed from a parent component to a child.
-Used to pass data and event handlers to child components.
-Read-only: Props cannot be modified inside the child component (they are immutable).
-Props are how components communicate.
-Props support dynamic rendering and customization.Must use props.<propertyName> to access inside the child.
-what if 25 props (then pass prop as object)
-prop are properties of that object


//
-rendor should return 


//bootstrap
-it is  a toolkit
-gives components
-here we gonna use only for styling
-Build fast, responsive sites with Bootstrap
-Powerful, extensible, and feature-packed frontend toolkit. Build and customize with Sass, utilize prebuilt grid system and components, and bring projects to life with powerful JavaScript plugins.
-css (index.css) <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.7/css/bootstrap.min.css" integrity="sha512-fw7f+TcMjTb7bpbLJZlP8g2Y4XcCyFZW8uy8HsRZsH/SwbMw0plKHFHr99DN3l04VsYNwvzicUX/6qurvIxbxw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
-layout-grid(divide into 12)....component-cards




///////
-div: is called block level element (dont allow come after)
-flex:



///
fontawesome: icons
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
