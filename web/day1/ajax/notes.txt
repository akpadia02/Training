🔷 HTML Requests and JavaScript’s Role:
When a JavaScript program wants data from a server (like posts, users, etc.), it makes an HTTP request — usually a GET request.
the JS code uses XMLHttpRequest (XHR) to make this request: xmlHttpReq.open("GET", "https://jsonplaceholder.typicode.com/posts");

“Hey server, send me the data at this URL.”

🔷 The Role of JavaScript (and XHR):
JavaScript says:
“I’ll provide the logic and functions to use the data once it arrives, but I depend on XMLHttpRequest (or fetch) to actually go and get it.”

🔷 The Problem with Traditional XHR:
The data doesn't arrive immediately. The request is asynchronous, so the program doesn't wait — it continues executing other code.

return xmlHttpReq.responseText; // ❌ Doesn't work

🔷 Enters: Promise
A Promise is a JavaScript object that represents a value that may be available now, in the future, or never.
A Promise is a placeholder for the future result of an asynchronous operation.

✅ Key Characteristics:
Synchronous in creation:
The Promise object itself is created immediately.

Asynchronous in execution:
The result (success or failure) is delivered later, when the async operation finishes.

✅ The Lifecycle of a Promise:
A promise has three states:
pending	- Initial state; the async operation is still in progress
fulfilled -	The operation completed successfully, and resolve() was called
rejected -	The operation failed, and reject() was called

🔁 Registering Actions with .then() and .catch()
.then() is used to register a callback function to run when the Promise is fulfilled (resolved).

.catch() is used to handle errors if the Promise is rejected.

💬 Real-world Analogy:
"I promise to give you the data. I'm not giving it now, but when I get it (from XHR/fetch), I’ll call your function."

=========================================================
XMLHttpRequest → Promise → Axios → async/await -> fetch api

1. XMLHttpRequest
-Oldest way to make HTTP requests in JS (used before fetch and Promise)
-Requires a lot of boilerplate
-Doesn't support Promises natively

2. Promise
-A modern JavaScript feature to handle async operations
-It represents a value that will be available in future
-Makes code cleaner than callbacks

3. Axios
-A popular third-party library (Promise-based)
-Simplifies HTTP requests
-Automatically parses JSON, handles errors better, and supports interceptors

4.async/await
-Syntactic sugar over Promises
-Makes async code look like synchronous code
-Easier to read and write
-es7

5. fetch api
-browser feature
-introduce in html5
-Fetch uses Promises, making it easier to write asynchronous code using .then() or async/await.
-Cleaner and more readable syntax for making HTTP requests (GET, POST, etc.).
-Fetch only rejects on network failure, not on HTTP errors like 404 or 500.
-You must manually check response.ok to handle such errors.